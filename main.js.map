{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.module.ts","webpack:///./src/app/employee/add-employee.component.html","webpack:///./src/app/employee/add-employee.component.ts","webpack:///./src/app/employee/employee.component.html","webpack:///./src/app/employee/employee.component.ts","webpack:///./src/app/employee/employee.service.ts","webpack:///./src/app/employee/update-employee.component.html","webpack:///./src/app/employee/update-employee.component.ts","webpack:///./src/app/models/employee.model.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n    <title></title>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\\n    <style>\\n        /* Para realizar el seguimiento correctamente */\\n        canvas.drawing, canvas.drawingBuffer {\\n            position: absolute;\\n            left: 0;\\n            top: 0;\\n        }\\n    </style>\\n</head>\\n\\n<body>\\n    <!-- Div para mostrar el escáner -->\\n    <div id=\\\"scanner-container\\\"></div>\\n    <input type=\\\"button\\\" id=\\\"btn\\\" value=\\\"Start/Stop the scanner\\\" />\\n\\n    <!-- Incluir la biblioteca image-diff -->\\n    <script src=\\\"quagga.min.js\\\"></script>\\n\\n    <script>\\n        var _scannerIsRunning = false;\\n\\n        function startScanner() {\\n            Quagga.init({\\n                inputStream: {\\n                    name: \\\"Live\\\",\\n                    type: \\\"LiveStream\\\",\\n                    target: document.querySelector('#scanner-container'),\\n                    constraints: {\\n                        width: 480,\\n                        height: 320,\\n                        facingMode: \\\"environment\\\"\\n                    },\\n                },\\n                decoder: {\\n                    readers: [\\n                        \\\"code_128_reader\\\",\\n                        \\\"ean_reader\\\",\\n                        \\\"ean_8_reader\\\",\\n                        \\\"code_39_reader\\\",\\n                        \\\"code_39_vin_reader\\\",\\n                        \\\"codabar_reader\\\",\\n                        \\\"upc_reader\\\",\\n                        \\\"upc_e_reader\\\",\\n                        \\\"i2of5_reader\\\"\\n                    ],\\n                    debug: {\\n                        showCanvas: true,\\n                        showPatches: true,\\n                        showFoundPatches: true,\\n                        showSkeleton: true,\\n                        showLabels: true,\\n                        showPatchLabels: true,\\n                        showRemainingPatchLabels: true,\\n                        boxFromPatches: {\\n                            showTransformed: true,\\n                            showTransformedBox: true,\\n                            showBB: true\\n                        }\\n                    }\\n                },\\n\\n            }, function (err) {\\n                if (err) {\\n                    console.log(err);\\n                    return\\n                }\\n\\n                console.log(\\\"Initialization finished. Ready to start\\\");\\n                Quagga.start();\\n\\n                // Establecer bandera en se está ejecutando\\n                _scannerIsRunning = true;\\n            });\\n\\n            Quagga.onProcessed(function (result) {\\n                var drawingCtx = Quagga.canvas.ctx.overlay,\\n                drawingCanvas = Quagga.canvas.dom.overlay;\\n\\n                if (result) {\\n                    if (result.boxes) {\\n                        drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute(\\\"width\\\")), parseInt(drawingCanvas.getAttribute(\\\"height\\\")));\\n                        result.boxes.filter(function (box) {\\n                            return box !== result.box;\\n                        }).forEach(function (box) {\\n                            Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: \\\"green\\\", lineWidth: 2 });\\n                        });\\n                    }\\n\\n                    if (result.box) {\\n                        Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: \\\"#00F\\\", lineWidth: 2 });\\n                    }\\n\\n                    if (result.codeResult && result.codeResult.code) {\\n                        Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: 'red', lineWidth: 3 });\\n                    }\\n                }\\n            });\\n\\n\\n            Quagga.onDetected(function (result) {\\n                console.log(\\\"Barcode detected and processed : [\\\" + result.codeResult.code + \\\"]\\\", result);\\n            });\\n        }\\n\\n\\n        // Iniciar / detener el escáner\\n        document.getElementById(\\\"btn\\\").addEventListener(\\\"click\\\", function () {\\n            if (_scannerIsRunning) {\\n                Quagga.stop();\\n            } else {\\n                startScanner();\\n            }\\n        }, false);\\n    </script>\\n</body>\\n\\n</html>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Clientes';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { EmployeeComponent } from './employee/employee.component';\nimport { AppRoutingModule } from './app.routing.module';\nimport {EmployeeService} from './employee/employee.service';\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {AddEmployeeComponent} from './employee/add-employee.component';\nimport { UpdateEmployeeComponent } from './employee/update-employee.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    EmployeeComponent,\n    AddEmployeeComponent,\n    UpdateEmployeeComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [EmployeeService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { EmployeeComponent } from './employee/employee.component';\nimport { AddEmployeeComponent } from './employee/add-employee.component';\nimport { UpdateEmployeeComponent } from './employee/update-employee.component';\n\nconst routes: Routes = [\n  { path: 'employees', component: EmployeeComponent },\n  { path: 'add', component: AddEmployeeComponent },\n  { path: 'update/:id', component: UpdateEmployeeComponent },\n  { path: '', redirectTo: '/employees', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { useHash: true })\n  ],\n  exports: [\n    RouterModule\n  ],\n  declarations: []\n})\nexport class AppRoutingModule { }\n","module.exports = \"<h2>Registrar Cliente</h2>\\n<form>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"name\\\">Nombre:</label>\\n    <input [(ngModel)]=\\\"employee.nombreCliente\\\" placeholder=\\\"Nombre\\\" name=\\\"name\\\" class=\\\"form-control\\\" id=\\\"name\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"surname\\\">Apellido:</label>\\n    <input [(ngModel)]=\\\"employee.apellidoCliente\\\" placeholder=\\\"Apellido\\\" name=\\\"surname\\\" class=\\\"form-control\\\"\\n      id=\\\"surname\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"phone\\\">Fecha de nacimiento:</label>\\n    <input type=\\\"date\\\" [(ngModel)]=\\\"employee.fechaNacimientoCliente\\\" placeholder=\\\"Fecha de nacimineto\\\" name=\\\"phone\\\"\\n      class=\\\"form-control\\\" id=\\\"phone\\\">\\n  </div>\\n  <div class=\\\"form-group text-center\\\">\\n    <button class=\\\"btn btn-success\\\" (click)=\\\"createEmployee()\\\">Create</button>\\n  </div>\\n\\n</form>\"","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Cliente } from '../models/employee.model';\nimport { EmployeeService } from './employee.service';\n\n@Component({\n  selector: 'app-employee-create',\n  templateUrl: './add-employee.component.html'\n})\nexport class AddEmployeeComponent {\n\n  employee: Cliente = new Cliente();\n\n  constructor(private router: Router, private employeeService: EmployeeService) {\n  }\n\n  createEmployee(): void {\n    this.employeeService.createEmployee(this.employee)\n      .subscribe(data => {\n        alert(\"Cliente registrado con exito.\");\n        this.router.navigate(['/employees']);\n      });\n\n  };\n\n}\n","module.exports = \"<br />\\n<table class=\\\"table table-striped\\\">\\n  <thead>\\n    <tr>\\n      <th class=\\\"hidden\\\">Id</th>\\n      <th>Nombre</th>\\n      <th>Apellido</th>\\n      <th>Fecha de nacimiento</th>\\n      <th>Edad</th>\\n      <th>Action</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr *ngFor=\\\"let employee of employees\\\">\\n      <td class=\\\"hidden\\\">{{employee.idCliente}}</td>\\n      <td>{{employee.nombreCliente}}</td>\\n      <td>{{employee.apellidoCliente}}</td>\\n      <td>{{employee.fechaNacimientoCliente | date:'dd/MM/yyyy' }}</td>\\n      <td>{{employee.edad}}</td>\\n      <td>\\n        <a [routerLink]=\\\"['/update', employee.idCliente]\\\" class=\\\"btn btn-info\\\">Update</a> &nbsp;\\n        <button class=\\\"btn btn-danger\\\" (click)=\\\"deleteEmployee(employee)\\\"> Delete</button>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Cliente, response } from '../models/employee.model';\nimport { EmployeeService } from './employee.service';\n\n@Component({\n  selector: 'app-employee-read',\n  templateUrl: './employee.component.html',\n  styles: []\n})\nexport class EmployeeComponent implements OnInit {\n\n  employees: Cliente[];\n\n  constructor(private router: Router, private employeeService: EmployeeService) {\n\n  }\n\n  ngOnInit() {\n    this.employeeService.getEmployees()\n      .subscribe(data => {\n        this.employees = data.data;\n      });\n  };\n\n  deleteEmployee(employee: Cliente): void {\n    this.employeeService.deleteEmployee(employee)\n      .subscribe(data => {\n        this.employees = this.employees.filter(u => u !== employee);\n      })\n  };\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Cliente, response } from '../models/employee.model';\n\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable()\nexport class EmployeeService {\n\n  constructor(private http: HttpClient) { }\n\n  private employeeUrl = 'https://promartapi20220302170655.azurewebsites.net/api/v1/cliente';\n\n  public getEmployees() {\n    return this.http.get<response>(this.employeeUrl);\n  }\n\n  public getEmployee(id) {\n    return this.http.get(this.employeeUrl + \"/\" + id);\n  }\n\n  public deleteEmployee(employee) {\n    console.log(\"employee\", employee);\n    return this.http.delete(this.employeeUrl + \"/\" + employee.idCliente);\n  }\n\n  public createEmployee(employee) {\n    return this.http.post<Cliente>(this.employeeUrl, employee);\n  }\n\n  public updateEmployee(employee) {\n    return this.http.put<Cliente>(this.employeeUrl, employee);\n  }\n\n}\n","module.exports = \"<h2>Actualizar Cliente</h2>\\n<form (ngSubmit)=\\\"updateEmployee()\\\" #employeeForm=\\\"ngForm\\\">\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"name\\\">Nombre:</label>\\n    <input [(ngModel)]=\\\"employee.nombreCliente\\\" placeholder=\\\"Name\\\" name=\\\"name\\\" class=\\\"form-control\\\" id=\\\"name\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"surname\\\">Apellido:</label>\\n    <input [(ngModel)]=\\\"employee.apellidoCliente\\\" placeholder=\\\"Surname\\\" name=\\\"surname\\\" class=\\\"form-control\\\"\\n      id=\\\"surname\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"phone\\\">Fecha de nacimiento:</label>\\n    <input type=\\\"date\\\" [(ngModel)]=\\\"employee.fechaNacimientoCliente\\\" placeholder=\\\"Phone\\\" name=\\\"phone\\\"\\n      class=\\\"form-control\\\" id=\\\"phone\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"phone\\\">Edad:</label>\\n    <input [(ngModel)]=\\\"employee.edad\\\" placeholder=\\\"Phone\\\" name=\\\"age\\\" class=\\\"form-control\\\" id=\\\"age\\\" disabled>\\n  </div>\\n  <div class=\\\"form-group text-center\\\">\\n    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Update</button>\\n  </div>\\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Cliente } from '../models/employee.model';\nimport { EmployeeService } from './employee.service';\n\n@Component({\n  selector: 'app-employee-update',\n  templateUrl: './update-employee.component.html',\n})\nexport class UpdateEmployeeComponent implements OnInit {\n\n  employee: any = {};\n\n  constructor(private router: Router, private route: ActivatedRoute, private employeeService: EmployeeService) {\n\n  }\n\n  ngOnInit() {\n    this.employeeService.getEmployee(this.route.snapshot.params['id'])\n      .subscribe(data => {\n        this.employee = data;\n      });\n  };\n\n  updateEmployee(): void {\n    this.employeeService.updateEmployee(this.employee)\n      .subscribe(data => {\n        alert(\"Se actualizo el registro con éxito.\");\n        this.router.navigate(['/employees']);\n      });\n\n  };\n\n}\n","export class Cliente {\n  idCliente: string;\n  nombreCliente: string;\n  apellidoCliente: string;\n  fechaNacimientoCliente: string;\n  edad: number;\n}\n\nexport class response {\n  count: number;\n  data: Cliente[];\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}